<?php

/**
 * @file
 * Contains ilr_registrations.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\commerce_price\Price;
use Drupal\commerce_store\Entity\Store;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_entity_type_alter().
 *
 * Add the 'salesforce' link template to the commerce_product_variation entity.
 * This will be unnecessary once commerce is patched to add a `canonical` link
 * template to the ProductVariation entity. To know why that has to happen, see
 * salesforce_mapping_entity_type_alter().
 */
function ilr_registrations_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  if (isset($entity_types['commerce_product_variation'])) {
    $entity_types['commerce_product_variation']->setLinkTemplate('salesforce', "/commerce_product_variation/{commerce_product_variation}/salesforce");
  }
  if (isset($entity_types['commerce_promotion'])) {
    $entity_types['commerce_promotion']->setLinkTemplate('salesforce', "/promotion/{commerce_promotion}/salesforce");
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Fix the price of commerce_product_variations imported by salesforce.
 */
function ilr_registrations_commerce_product_variation_presave(EntityInterface $entity) {
  if (!$entity->hasField('field_class_price')) {
    return;
  }

  // Update the price property if there is a value from the sf mapping.
  if (isset($entity->field_class_price->first()->value)) {
    $salesforce_price_string = (string) $entity->field_class_price->first()->value;
    $entity->price = new Price($salesforce_price_string, 'USD');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Set some values for `commerce_product`s when they are saved.
 * - Ensure that they use the default store if they don't have one set. This can
 *   happen when imported via Salesforce.
 * - Create or assign taxonomy terms for newly created products.
 */
function ilr_registrations_commerce_product_presave(EntityInterface $product) {
  // Check if this product has a store assigned.
  if (count($product->getStoreIds()) === 0) {
    // Get the default store.
    $default_store = \Drupal::service('commerce_store.default_store_resolver')->resolve();

    // Ensure that there is a default store. The only reason it would be missing
    // is if an admin deleted it.
    if ($default_store) {
      // Set the default store for this storeless product.
      $product->stores = [
        'target_id' => $default_store->id(),
      ];
    }
  }

  $entity_type_manager = \Drupal::service('entity_type.manager');
  $product_storage = $entity_type_manager->getStorage('commerce_product');
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');

  // Check that the product has a value for `field_course_number` and that the
  // product has the `field_course_prefixes` field.
  if ($product->isNew() && $product->hasField('field_course_number') && !$product->get('field_course_number')->isEmpty() && $product->hasField('field_course_prefixes')) {
    $course_prefixes_vid = 'course_prefixes';

    // Get the course number prefix from the course number (e.g. CR100 -> CR).
    if (preg_match('/^[A-Z]+/', $product->get('field_course_number')->value, $matches)) {
      $course_number_prefix = $matches[0];

      // Get the term for this course number prefix.
      $course_prefix_term = $entity_type_manager->getStorage('taxonomy_term')->loadByProperties([
        'name' => $course_number_prefix,
        'vid' => $course_prefixes_vid,
      ]);
      $course_prefix_term = reset($course_prefix_term);

      // If there is no term for this prefix, create a new one.
      if (empty($course_prefix_term)) {
        $course_prefix_term = $term_storage->create([
          'name' => $course_number_prefix,
          'vid' => $course_prefixes_vid,
        ]);
        $course_prefix_term->save();
      }

      // Assign the course number prefix tid to the product entity.
      $product->set('field_course_prefixes', $course_prefix_term->id());
    }
  }

  // Check that the product has the `field_tags` field.
  if ($product->isNew() && $product->hasField('field_tags')) {
    $product_tags_vid = 'product_tags';

    // Get the 'Discount Eligible' term.
    $discount_eligible_term = $entity_type_manager->getStorage('taxonomy_term')->loadByProperties([
      'name' => 'Discount Eligible',
      'vid' => $product_tags_vid,
    ]);
    $discount_eligible_term = reset($discount_eligible_term);

    // If there is no such term, create one.
    if (empty($discount_eligible_term)) {
      $discount_eligible_term = $term_storage->create([
        'name' => 'Discount Eligible',
        'vid' => $product_tags_vid,
      ]);
      $discount_eligible_term->save();
    }

    // Assign the discount eligible tid to the product entity.
    $product->set('field_tags', $discount_eligible_term->id());
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Process imported entities when they are saved by a sf mapping object.
 */
function ilr_registrations_salesforce_mapped_object_presave(EntityInterface $sf_mapped_object) {
  if ($sf_mapped_object->getMapping()->id() === 'discount_promotion') {
    $commerce_promotion = $sf_mapped_object->getMappedEntity();

    // Create a default coupon for new promotions from Salesforce.
    if ($sf_mapped_object->isNew()) {
      $coupon_storage = \Drupal::service('entity_type.manager')->getStorage('commerce_promotion_coupon');
      $coupon = $coupon_storage->create([
        'promotion_id' => $commerce_promotion->id(),
        'code' => $commerce_promotion->label(),
        'status' => 1
      ]);
      $coupon->save();
    }
  }
}

/**
 * Implements hook_entity_bundle_create().
 */
function ilr_registrations_entity_bundle_create($entity_type_id, $bundle) {
  // Create an initial store for newly created commerce store types.
  // See https://docs.drupalcommerce.org/commerce2/developer-guide/stores/create-store.
  if ($entity_type_id == 'commerce_store') {
    $address = [
      'country_code' => 'US',
      'address_line1' => '615 Ives Hall',
      'locality' => 'Ithaca',
      'administrative_area' => 'NY',
      'postal_code' => '14850',
    ];

    $store = Store::create([
      'type' => $bundle,
      'uid' => 1,
      'uuid' => '64d69849-b75d-4414-91d8-b0fb1d0fb4cb',
      'name' => 'ILR Store',
      'mail' => 'ilrweb@cornell.edu',
      'address' => $address,
      'default_currency' => 'USD',
    ]);
    $store->save();

    $store_storage = \Drupal::service('entity_type.manager')->getStorage('commerce_store');
    $store_storage->markAsDefault($store);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the participant_ui js library when there is a registration form.
 * Add the default participant for logged_in users with previous registrations.
 */
function ilr_registrations_form_entity_registration_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['participants']['widget']['entities']['#theme'] == 'inline_entity_form_entity_table') {
    $form['#attached']['library'][] = 'ilr_registrations/ilr_registrations_participant_ui';
  }

  // Check if the current user is authenticated
  $account = \Drupal::currentUser();
  if ($account->isAuthenticated() && isset($form['participants']['widget']['form']['inline_entity_form']) && empty($form_state->getUserInput())) {
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $registration_storage = $entity_type_manager->getStorage('registration');
    $registrations = $registration_storage->loadByProperties([
      'user_id' => $account->id(),
    ]);

    if (empty($registrations)) {
      return;
    }

    $registration_participant_type = $form['participants']['widget']['form']['inline_entity_form']['#bundle'];

    foreach ($registrations as $registration_id => $registration) {
      if ($registration->participants->isEmpty() || $registration->participants->first()->entity->bundle() !== $registration_participant_type) {
        unset($registrations[$registration_id]);
      }
    }

    if (empty($registrations)) {
      return;
    }

    $last_registration = end($registrations);
    $most_recent_participant = $last_registration->participants->first()->entity;
    $form['participants']['widget']['form']['inline_entity_form']['#default_value'] = $most_recent_participant->createDuplicate();
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Add the participant_ui js library when there is an IEF for participants.
 */
function ilr_registrations_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface &$form_state) {
  if ($entity_form['#entity_type'] == 'participant') {
    $entity_form['#attached']['library'][] = 'ilr_registrations/ilr_registrations_participant_ui';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Remove the 'Save' button from the registration cart form.
 */
function ilr_registrations_form_views_form_registration_cart_form_default_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Update the fieldset label for the payment_information pane.
 * Set default values based on the first participant.
 */
function ilr_registrations_form_commerce_checkout_flow_multistep_default_alter(&$form, FormStateInterface $form_state) {
  // Set the fieldset label
  $form['payment_information']['#title'] = t('Your info');
  $order_registration_manager = \Drupal::service('erf_commerce.order_registration_manager');
  $order = $form_state->getFormObject()->getOrder();

  // Check if on the billing pane
  if (isset($form['payment_information']['billing_information'])) {
    $billing_pane = &$form['payment_information']['billing_information'];
    $registrations = $order_registration_manager->getOrderRegistrations($order);

    if (!empty($registrations)) {
      $registration = reset($registrations);
      // Check first to see if there are any existing commerce profiles
      // @todo: rework once https://www.drupal.org/project/commerce/issues/3022850 lands
      $entity_type_manager = \Drupal::service('entity_type.manager');
      $profile_storage = $entity_type_manager->getStorage('profile');
      $user_profiles = $profile_storage->loadByProperties([
        'type' => 'customer',
        'uid' => $order->getCustomerId(),
      ]);

      if (!empty($user_profiles)) {
        // Use the last profile
        $most_recent_profile = end($user_profiles);
        foreach ($most_recent_profile->getFields() as $field_name => $value) {
          if (isset($billing_pane[$field_name])) {
            $billing_pane[$field_name]['widget'][0]['value']['#default_value'] = $most_recent_profile->{$field_name}->getString();
          }
        }
      } elseif (!empty($registration->participants)) {
        $default_participant = $registration->participants->first()->entity;
        $fields = $default_participant->getFields();
        $keys = array_keys($billing_pane);

        // Set the values if there are matching field names
        foreach ($keys as $key) {
          if (isset($fields[$key])) {
            $billing_pane[$key]['widget'][0]['value']['#default_value'] = $default_participant->get($key)->getString();
          } elseif (strpos($key, '_email') > 0) {
            $billing_pane[$key]['widget'][0]['value']['#default_value'] = $default_participant->getMail();
          }
        }
      }
    }
  }

  if (isset($form['sidebar']['coupon_redemption']['form'])) {
    // Hide the coupon inline form if the order total is zero, but not if there
    // are any applied coupons.
    if ($order->getBalance()->isZero() && $order->coupons->count() === 0) {
      $form['sidebar']['coupon_redemption']['#access'] = FALSE;
    }
    // Add the js enhancement for the coupon form.
    else {
      $form['sidebar']['coupon_redemption']['form']['#attached']['library'][] = 'ilr_registrations/coupon_enhancements';
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function ilr_registrations_local_tasks_alter(&$local_tasks) {
  // Re-title the Edit tab on the user account page.
  $local_tasks['entity.user.edit_form']['title'] = 'Edit your information';
}

/**
 * Implements hook_user_format_name_alter().
 */
function ilr_registrations_user_format_name_alter(&$name, $account) {
  $entity_type_manager = \Drupal::service('entity_type.manager');

  // Load a customer profile for this user. This can be done via
  // loadDefaultByUser() as below, but loadByUser() and loadMultipleByUser() are
  // also options.
  $profile = $entity_type_manager->getStorage('profile')->loadDefaultByUser($account, 'customer', TRUE);

  if (empty($profile)) {
    return;
  }

  // If the customer profile has both a first and last name, show them as the
  // display name.
  if ($profile->hasField('field_first_name') && $profile->hasField('field_last_name')) {
    $name = $profile->field_first_name->value . ' ' . $profile->field_last_name->value;
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function ilr_registrations_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  // Add a cacheable dependency to the user for any breadcrumbs that have one in
  // the current route. This ensures that changes to the user display name from
  // ilr_registrations_user_format_name_alter() appear immediately.
  if ($route_match && $user = $route_match->getParameter('user')) {
    $breadcrumb->addCacheableDependency($user);
  }
}
