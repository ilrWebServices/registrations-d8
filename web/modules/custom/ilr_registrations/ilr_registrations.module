<?php

/**
 * @file
 * Contains ilr_registrations.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\commerce_price\Price;

/**
 * Implements hook_entity_type_alter().
 *
 * Add the 'salesforce' link template to the commerce_product_variation entity.
 * This will be unnecessary once commerce is patched to add a `canonical` link
 * template to the ProductVariation entity. To know why that has to happen, see
 * salesforce_mapping_entity_type_alter().
 */
function ilr_registrations_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  if (isset($entity_types['commerce_product_variation'])) {
    $entity_types['commerce_product_variation']->setLinkTemplate('salesforce', "/commerce_product_variation/{commerce_product_variation}/salesforce");
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Fix the price of commerce_product_variations imported by salesforce.
 */
function ilr_registrations_commerce_product_variation_presave(EntityInterface $entity) {
  // Update the price property if there is a value from the sf mapping.
  if (isset($entity->field_class_price->first()->value)) {
    $salesforce_price_string = (string) $entity->field_class_price->first()->value;
    $entity->price = new Price($salesforce_price_string, 'USD');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Ensure that `commerce_product`s imported by salesforce use the default store.
 */
function ilr_registrations_commerce_product_presave(EntityInterface $entity) {
  // If this product has a store assigned, it's fine.
  if (count($entity->getStoreIds()) > 0) {
    return;
  }

  // Get the default store.
  $default_store = \Drupal::service('commerce_store.default_store_resolver')->resolve();

  // Just bail if there is no default store. That should only happen if an
  // admin deleted it.
  if (!$default_store) {
    return;
  }

  // Set the default store for this storeless product.
  $entity->stores = [
    'target_id' => $default_store->id(),
  ];
}

/**
 * Implements hook_theme().
 */
function ilr_registrations_theme() {
  $theme = [];
  $theme['registration'] = [
    'render element' => 'elements',
    'file' => 'registration.page.inc',
    'template' => 'registration',
  ];
  $theme['registration_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'registration.page.inc',
  ];
  $theme['participant'] = [
    'render element' => 'elements',
    'file' => 'participant.page.inc',
    'template' => 'participant',
  ];
  $theme['participant_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'participant.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function ilr_registrations_theme_suggestions_registration(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#registration'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'registration__' . $sanitized_view_mode;
  $suggestions[] = 'registration__' . $entity->bundle();
  $suggestions[] = 'registration__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'registration__' . $entity->id();
  $suggestions[] = 'registration__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function ilr_registrations_theme_suggestions_participant(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#participant'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'participant__' . $sanitized_view_mode;
  $suggestions[] = 'participant__' . $entity->bundle();
  $suggestions[] = 'participant__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'participant__' . $entity->id();
  $suggestions[] = 'participant__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_bundle_create().
 *
 * Creates an 'inline' form display for each new participant type.
 */
function ilr_registrations_entity_bundle_create($entity_type_id, $bundle) {
  if ($entity_type_id == 'participant' && !\Drupal::isConfigSyncing()) {
    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
    $form_display = $storage->load('participant.' . $bundle . '.inline');

    if (!$form_display) {
      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
      $form_display = $storage->create([
        'targetEntityType' => 'participant',
        'bundle' => $bundle,
        'mode' => 'inline',
        'status' => TRUE,
      ]);
      // Hide the uid and creator_uid by default.
      $form_display->removeComponent('uid');
      $form_display->removeComponent('creator_uid');
      $form_display->save();
    }
  }
}
