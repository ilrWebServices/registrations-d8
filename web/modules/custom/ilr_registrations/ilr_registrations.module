<?php

/**
 * @file
 * Contains ilr_registrations.module.
 */

use CommerceGuys\Addressing\AddressFormat\AddressField;
use CommerceGuys\Addressing\AddressFormat\FieldOverride;
use Drupal\address\Plugin\Field\FieldWidget\AddressDefaultWidget;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Entity\EntityInterface;
use Drupal\commerce_price\Price;
use Drupal\commerce_store\Entity\Store;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\Plugin\Field\FieldWidget\StringTextareaWidget;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Render\Markup;
use Drupal\ilr_registrations\IlrRegistrationsBlockAlter;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_type_alter().
 *
 * Add the 'salesforce' link template to the commerce_product_variation entity.
 * This will be unnecessary once commerce is patched to add a `canonical` link
 * template to the ProductVariation entity. To know why that has to happen, see
 * salesforce_mapping_entity_type_alter().
 */
function ilr_registrations_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  if (isset($entity_types['commerce_product_variation'])) {
    $entity_types['commerce_product_variation']->setLinkTemplate('salesforce', "/commerce_product_variation/{commerce_product_variation}/salesforce");
  }
  if (isset($entity_types['commerce_promotion'])) {
    $entity_types['commerce_promotion']->setLinkTemplate('salesforce', "/promotion/{commerce_promotion}/salesforce");
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Fix the price of commerce_product_variations imported by salesforce.
 */
function ilr_registrations_commerce_product_variation_presave(EntityInterface $entity) {
  if (!$entity->hasField('field_class_price')) {
    return;
  }

  // Update the price property if there is a value from the sf mapping.
  if (isset($entity->field_class_price->first()->value)) {
    $salesforce_price_string = (string) $entity->field_class_price->first()->value;
    $entity->price = new Price($salesforce_price_string, 'USD');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Set some values for `commerce_product`s when they are saved.
 * - Ensure that they use the default store if they don't have one set. This can
 *   happen when imported via Salesforce.
 * - Create or assign taxonomy terms for newly created products.
 */
function ilr_registrations_commerce_product_presave(EntityInterface $product) {
  // Check if this product has a store assigned.
  if (count($product->getStoreIds()) === 0) {
    // Get the default store.
    $default_store = \Drupal::service('commerce_store.default_store_resolver')->resolve();

    // Ensure that there is a default store. The only reason it would be missing
    // is if an admin deleted it.
    if ($default_store) {
      // Set the default store for this storeless product.
      $product->stores = [
        'target_id' => $default_store->id(),
      ];
    }
  }

  $entity_type_manager = \Drupal::service('entity_type.manager');
  $product_storage = $entity_type_manager->getStorage('commerce_product');
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');

  // Check that the product has a value for `field_course_number` and that the
  // product has the `field_course_prefixes` field.
  if ($product->isNew() && $product->hasField('field_course_number') && !$product->get('field_course_number')->isEmpty() && $product->hasField('field_course_prefixes')) {
    $course_prefixes_vid = 'course_prefixes';

    // Get the course number prefix from the course number (e.g. CR100 -> CR).
    if (preg_match('/^[A-Z]+/', $product->get('field_course_number')->value, $matches)) {
      $course_number_prefix = $matches[0];

      // Get the term for this course number prefix.
      $course_prefix_term = $entity_type_manager->getStorage('taxonomy_term')->loadByProperties([
        'name' => $course_number_prefix,
        'vid' => $course_prefixes_vid,
      ]);
      $course_prefix_term = reset($course_prefix_term);

      // If there is no term for this prefix, create a new one.
      if (empty($course_prefix_term)) {
        $course_prefix_term = $term_storage->create([
          'name' => $course_number_prefix,
          'vid' => $course_prefixes_vid,
        ]);
        $course_prefix_term->save();
      }

      // Assign the course number prefix tid to the product entity.
      $product->set('field_course_prefixes', $course_prefix_term->id());
    }
  }

  // Check that the product has the `field_tags` field.
  if ($product->isNew() && $product->hasField('field_tags') && $product->field_tags->isEmpty()) {
    $product_tags_vid = 'product_tags';

    // Get the 'Discount Eligible' term.
    $discount_eligible_term = $entity_type_manager->getStorage('taxonomy_term')->loadByProperties([
      'name' => 'Discount Eligible',
      'vid' => $product_tags_vid,
    ]);
    $discount_eligible_term = reset($discount_eligible_term);

    // If there is no such term, create one.
    if (empty($discount_eligible_term)) {
      $discount_eligible_term = $term_storage->create([
        'name' => 'Discount Eligible',
        'vid' => $product_tags_vid,
      ]);
      $discount_eligible_term->save();
    }

    // Assign the discount eligible tid to the product entity.
    $product->set('field_tags', $discount_eligible_term->id());
  }

  // If the product variations have a field_class_start field, sort the
  // variation deltas by that field.
  if ($product->variations->count() > 0 && $product->variations->first()->entity->hasField('field_class_start')) {
    $variation_entities = $product->variations->referencedEntities();

    // Sort the variations by date here.
    usort($variation_entities, function ($a, $b) {
      if ($a->field_class_start->first()->value == $b->field_class_start->first()->value) {
        return 0;
      }
      elseif ($a->field_class_start->first()->value < $b->field_class_start->first()->value) {
        return -1;
      }
      else {
        return 1;
      }
    });

    $product->set('variations', $variation_entities);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Process imported entities when they are saved by a sf mapping object.
 */
function ilr_registrations_salesforce_mapped_object_presave(EntityInterface $sf_mapped_object) {
  if ($sf_mapped_object->getMapping()->id() === 'discount_promotion') {
    $commerce_promotion = $sf_mapped_object->getMappedEntity();

    // Create a default coupon for new promotions from Salesforce.
    if ($sf_mapped_object->isNew()) {
      $coupon_storage = \Drupal::service('entity_type.manager')->getStorage('commerce_promotion_coupon');
      $coupon = $coupon_storage->create([
        'promotion_id' => $commerce_promotion->id(),
        'code' => $commerce_promotion->label(),
        'status' => 1,
      ]);
      $coupon->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Store class dates and salesforce id data with class order items.
 */
function ilr_registrations_commerce_order_item_presave(EntityInterface $order_item) {
  if ($order_item->bundle() !== 'class') {
    return;
  }

  $sf_mapping_storage = \Drupal::service('entity_type.manager')->getStorage('salesforce_mapped_object');
  $class_product_variation = $order_item->getPurchasedEntity();
  $course_product = $class_product_variation->getProduct();

  // Store a formatted version of the start date for use in email templates.
  $order_item->setData('class_start_date', $class_product_variation->field_class_start->date->format('M j, Y'));

  $sf_variation_mapped_objects = $sf_mapping_storage->loadByEntity($class_product_variation);

  if (!empty($sf_variation_mapped_objects)) {
    $sf_variation_mapped_object = reset($sf_variation_mapped_objects);
    $order_item->setData('sf_class_id', $sf_variation_mapped_object->sfid());
  }

  $sf_product_mapped_objects = $sf_mapping_storage->loadByEntity($course_product);

  if (!empty($sf_product_mapped_objects)) {
    $sf_product_mapped_object = reset($sf_product_mapped_objects);
    $order_item->setData('sf_course_id', $sf_product_mapped_object->sfid());
  }
}

/**
 * Implements hook_entity_bundle_create().
 */
function ilr_registrations_entity_bundle_create($entity_type_id, $bundle) {
  // Create an initial store for newly created commerce store types.
  // See https://docs.drupalcommerce.org/commerce2/developer-guide/stores/create-store.
  if ($entity_type_id == 'commerce_store') {
    $address = [
      'country_code' => 'US',
      'address_line1' => '615 Ives Hall',
      'locality' => 'Ithaca',
      'administrative_area' => 'NY',
      'postal_code' => '14850',
    ];

    $store = Store::create([
      'type' => $bundle,
      'uid' => 1,
      'uuid' => '64d69849-b75d-4414-91d8-b0fb1d0fb4cb',
      'name' => 'ILR Store',
      'mail' => 'ilrweb@cornell.edu',
      'address' => $address,
      'default_currency' => 'USD',
      'is_default' => TRUE,
    ]);
    $store->save();

    $store_storage = \Drupal::service('entity_type.manager')->getStorage('commerce_store');
    $store_storage->markAsDefault($store);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Add requested help text to debate camp registration forms.
 */
function ilr_registrations_form_registration_international_summer_debate_camp_embedded_form_alter(&$form, FormStateInterface $form_state) {
  $form['participant_help'] = [
    '#markup' => '<p><strong>' . t('If you are enrolling more than one child in the camp, please save this participant and then you will be able to add another.') .'</strong></p>',
    '#weight' => 10,
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Add the participant change protection js to the form.
 * Add the participant_ui js library when there is a registration form.
 * Add the default participant for logged_in users with previous registrations.
 */
function ilr_registrations_form_registration_form_alter(&$form, FormStateInterface $form_state) {
  // Add the js to protect edited, unsaved participant info from being lost.
  $form['#attached']['library'][] = 'ilr_registrations/participant_edit_protect';

  $account = \Drupal::currentUser();
  if (isset($form['participants']['widget']['form']['inline_entity_form']) && empty($form_state->getUserInput()) && !$account->hasPermission('access registration administration pages')) {
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $registration_storage = $entity_type_manager->getStorage('registration');

    // Check if the current user is authenticated.
    if ($account->isAuthenticated()) {
      $registrations = $registration_storage->loadByProperties([
        'user_id' => $account->id(),
      ]);
    }
    // Check the erf session service for anonymous users.
    elseif ($registration_ids = \Drupal::service('erf.session')->getRegistrationIds()) {
      $registrations = $registration_storage->loadByProperties([
        'id' => $registration_ids,
      ]);
    }
    else {
      $registrations = [];
    }

    if (empty($registrations)) {
      return;
    }

    $registration_participant_type = $form['participants']['widget']['form']['inline_entity_form']['#bundle'];

    foreach ($registrations as $registration_id => $registration) {
      if ($registration->participants->isEmpty() || $registration->participants->first()->entity->bundle() !== $registration_participant_type) {
        unset($registrations[$registration_id]);
      }
    }

    if (empty($registrations)) {
      return;
    }

    $last_registration = end($registrations);
    $most_recent_participant = $last_registration->participants->first()->entity;
    $form['participants']['widget']['form']['inline_entity_form']['#default_value'] = $most_recent_participant->createDuplicate();
  }

  /** @var \Drupal\Core\Menu\MenuLinkManager $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

  $email_url = Url::fromUri($menu_link_manager->getDefinition('ilr_registrations.email')['url']);
  $phone_url = Url::fromUri($menu_link_manager->getDefinition('ilr_registrations.telephone')['url']);

  if (isset($form['erf_commerce_locked_cart_notice'])) {
    $form['erf_commerce_locked_cart_notice']['#context']['message'] = t('It looks like you started the payment process, which locked your cart. Did your payment succeed? If so, please contact customer support by @email or by calling @phone. Otherwise, reset your cart to try again.', [
      '@email' => Link::fromTextAndUrl(t('email'), $email_url)->toString(),
      '@phone' => Link::fromTextAndUrl($menu_link_manager->getDefinition('ilr_registrations.telephone')['title'], $phone_url)->toString(),
    ]);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Remove the 'Save' button from the registration cart form.
 */
function ilr_registrations_form_views_form_registration_cart_form_default_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Update the fieldset label for the payment_information pane.
 * Set default values based on the first participant.
 */
function ilr_registrations_form_commerce_checkout_flow_multistep_default_alter(&$form, FormStateInterface $form_state) {
  // Set the payment info fieldset label.
  $form['payment_information']['#title'] = t('Account info');

  // Get the order for this checkout multistep form.
  $order_registration_manager = \Drupal::service('erf_commerce.order_registration_manager');
  $order = $form_state->getFormObject()->getOrder();

  // If we're on the billing pane, make some alterations below.
  if (isset($form['payment_information']['billing_information'])) {
    $billing_pane = &$form['payment_information']['billing_information'];

    // Get the default commerce customer profile.
    // @todo rework once https://www.drupal.org/project/commerce/issues/3022850 lands
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $profile = $entity_type_manager->getStorage('profile')->loadDefaultByUser($order->getCustomer(), 'customer', TRUE);

    // If there is a profile, pre-fill any matching form fields.
    if (!empty($profile)) {
      foreach ($profile->getFields() as $field_name => $value) {
        if (isset($billing_pane[$field_name])) {
          if ($field_name == 'address') {
            $billing_pane[$field_name]['widget'][0]['address']['#default_value'] = $profile->{$field_name}->getValue()[0];
          }
          else {
            $billing_pane[$field_name]['widget'][0]['value']['#default_value'] = $profile->{$field_name}->getString();
          }
        }
      }
    }
    else {
      $registrations = $order_registration_manager->getOrderRegistrations($order);

      // Look through all participants for all registrations in this order. See
      // if there is a participant with an email address that matches the order
      // customer email address. The customer is most likely the current user.
      $customer_participant = FALSE;
      foreach ($registrations as $registration) {
        foreach ($registration->participants as $participant) {
          if ($participant->entity->mail->value === $order->getCustomer()->mail->value) {
            $customer_participant = $participant->entity;
            break 2;
          }
        }
      }

      if ($customer_participant) {
        $fields = $customer_participant->getFields();
        $keys = array_keys($billing_pane);

        // Set the values if there are matching field names.
        foreach ($keys as $key) {
          if ($key === 'address' && isset($fields['field_' . $key])) {
            $billing_pane[$key]['widget'][0]['address']['#default_value'] = $customer_participant->get('field_' . $key)->getValue()[0];
          }
          elseif (isset($fields[$key])) {
            $field_def = $fields[$key]->getFieldDefinition();

            if (in_array($field_def->getType(), ['string', 'telephone'])) {
              $billing_pane[$key]['widget'][0]['value']['#default_value'] = $customer_participant->get($key)->getString();
            }
            elseif (in_array($field_def->getType(), ['list_string'])) {
              // Note that options lists use an array as a default value.
              $billing_pane[$key]['widget']['#default_value'] = [$customer_participant->get($key)->getString()];
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_commerce_inline_form_PLUGIN_ID_alter().
 */
function ilr_registrations_commerce_inline_form_customer_profile_alter(array &$inline_form, FormStateInterface $form_state, array &$complete_form) {
  if (isset($inline_form['address']['widget'][0]['address'])) {
    // Make the customer field required.
    $inline_form['address']['widget'][0]['address']['#field_overrides'] = [
      AddressField::ORGANIZATION => FieldOverride::REQUIRED,
    ];
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function ilr_registrations_local_tasks_alter(&$local_tasks) {
  // Re-title the Edit tab on the user account page.
  $local_tasks['entity.user.edit_form']['title'] = 'Change password';
}

/**
 * Implements hook_user_format_name_alter().
 */
function ilr_registrations_user_format_name_alter(&$name, AccountInterface $account) {
  $entity_type_manager = \Drupal::service('entity_type.manager');

  // Order admins can create orders on behalf of others, so always show their
  // NetID common name (or real username if common name is empty).
  if ($account->hasPermission('access commerce_order overview')) {
    if ($account instanceof UserInterface && !$account->field_common_name->isEmpty()) {
      $name =  $account->field_common_name->value . ' (' . $name . ')';
    }

    return;
  }

  // Load a customer profile for this user. This can be done via
  // loadDefaultByUser() as below, but loadByUser() and loadMultipleByUser() are
  // also options.
  $profile = $entity_type_manager->getStorage('profile')->loadDefaultByUser($account, 'customer', TRUE);

  if (empty($profile)) {
    return;
  }

  // If the customer profile has both a first and last name, show them as the
  // display name.
  if ($profile->address->given_name && $profile->address->family_name) {
    $name = $profile->address->given_name . ' ' . $profile->address->family_name;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the registration entity form for the type `simple_class`.
 *
 * - Removes participants and submit buttons when there are no class options.
 * - Updates the register button text for clarity.
 * - Adds a link back to the catalog if registration already in cart.
 */
function ilr_registrations_form_registration_simple_class_embedded_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (empty($form['product_variation']['widget']['#options'])) {
    $form['participants']['#access'] = FALSE;
    $form['actions']['#access'] = FALSE;
  }

  if ($form_state->getFormObject()->getEntity()->isNew()) {
    $button_text = t('Add to cart');
  }
  else {
    $button_text = t('Update cart');

    // Add a link back to the catalog if item already in cart.
    $marketing_url = (getenv('MARKETING_SITE_HOSTNAME'))
      ? getenv('MARKETING_SITE_HOSTNAME')
      : 'https://www.ilr.cornell.edu';

    $form['actions']['return'] = [
      '#type' => 'link',
      '#title' => t('Return to course catalog'),
      '#attributes' => ['class' => ['cu-button']],
      '#url' => Url::fromUri($marketing_url . '/programs/professional-education'),
      '#weight' => 10,
    ];
  }

  $form['actions']['submit']['#value'] = $button_text;
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function ilr_registrations_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  // Add a cacheable dependency to the user for any breadcrumbs that have one in
  // the current route. This ensures that changes to the user display name from
  // ilr_registrations_user_format_name_alter() appear immediately.
  if ($route_match && $user = $route_match->getParameter('user')) {
    $breadcrumb->addCacheableDependency($user);
  }
}

/**
 * Implements hook_preprocess_HOOK() for user templates.
 *
 * Display the default customer profile on the main user page.
 */
function ilr_registrations_preprocess_user(&$variables) {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $profile_storage = $entity_type_manager->getStorage('profile');
  $view_builder = $entity_type_manager->getViewBuilder('profile');

  $profile = $entity_type_manager->getStorage('profile')->loadDefaultByUser($variables['user'], 'customer', TRUE);

  if (!empty($profile)) {
    $variables['content']['customer_profile'] = $view_builder->view($profile);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Replace or modify messages.
 */
function ilr_registrations_preprocess_status_messages(&$variables) {
  if (empty($variables['message_list']['error'])) {
    return;
  }

  foreach ($variables['message_list']['error'] as $delta => $message) {
    // Append a notice to the missing account message set in
    // UserPasswordForm::validateForm().
    if (strpos((string) $message, 'is not recognized as a username or an email address') !== FALSE) {
      $variables['message_list']['error'][$delta] = Markup::create($message . '<br><br>' . t('If you had an account in our previous registration system, you will need to create a new one as part of your first registration.'));
    }
  }
}

/**
 * Implements hook_preprocess_field().
 *
 * Make the product variation title a link to the variation. We do this here
 * because Drupal 9.1.x and up can't use the link to entity option in the title
 * stringformatter because product variations don't have canonical link
 * templates.
 *
 * @see Drupal\Core\Field\Plugin\Field\FieldFormatter\StringFormatter::viewElements()
 */
function ilr_registrations_preprocess_field__commerce_product_variation__title(&$variables) {
  $variables['items'][0]['content'] = [
    '#type' => 'link',
    '#title' => [
      '#type' => 'inline_template',
      '#template' => '{{ value|nl2br }}',
      '#context' => ['value' => $variables['element']['#items']->value],
    ],
    '#url' => $variables['element']['#object']->toUrl(),
  ];
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function ilr_registrations_block_view_commerce_cart_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = [IlrRegistrationsBlockAlter::class, 'preRender'];
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 *
 * This adds the `user` cache context to the main menu, ensuring the correct
 * user name is added to the main menu when the user is logged in.
 */
function ilr_registrations_block_build_system_menu_block_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getDerivativeId() === 'main') {
    $build['#cache']['contexts'][] = 'user';
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function ilr_registrations_menu_links_discovered_alter(&$links) {
  $links['user.page']['title'] = new TranslatableMarkup('Account Settings');
}

/**
 * Custom allowed_values_function for the participant industry field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 * @todo Consider using the SF API to dynamically generate this list.
 */
function ilr_registrations_industry_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [
    '11 Agriculture, Forestry, Fishing and Hunting' => 'Agriculture, Forestry, Fishing and Hunting',
    '21 Mining, Quarrying, and Oil and Gas Extraction' => 'Mining, Quarrying, and Oil and Gas Extraction',
    '22 Utilities' => 'Utilities',
    '23 Construction' => 'Construction',
    '31-33 Manufacturing' => 'Manufacturing',
    '42 Wholesale Trade' => 'Wholesale Trade',
    '44-45 Retail Trade' => 'Retail Trade',
    '48-49 Transportation and Warehousing' => 'Transportation andWarehousing',
    '51 Information' => 'Information',
    '52 Finance and Insurance' => 'Finance and Insurance',
    '53 Real Estate and Rental and Leasing' => 'Real Estate and Rental and Leasing',
    '54 Professional, Scientific, and Technical Services' => 'Professional, Scientific, and Technical Services',
    '55 Management of Companies and Enterprises' => 'Management of Companies and Enterprises',
    '56 Administrative and Support and Waste Management and Remediation Services' => 'Administrative and Support and Waste Management and Remediation Services',
    '61 Educational Services' => 'Educational Services',
    '62 Health Care and Social Assistance' => 'Health Care and Social Assistance',
    '71 Arts, Entertainment, and Recreation' => 'Arts, Entertainment, and Recreation',
    '72 Accommodation and Food Services' => 'Accommodation and Food Services',
    '81 Other Services (except Public Administration)' => 'Other Services (except Public Administration)',
    '92 Public Administration' => 'Public Administration',
    'Individual' => 'Individual',
  ];

  return $options;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_registrations_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['saml_login'] = [
    '#type' => 'link',
    '#url' => Url::fromRoute('samlauth.saml_controller_login'),
    '#title' => t('Admin login'),
    '#weight' => 100,
    '#prefix' => '<sub>',
    '#suffix' => '</sub>',
  ];
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function ilr_registrations_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();

  if (strpos($field_name, 'address') !== FALSE) {
    $element['#after_build'][] = 'ilr_registrations_alter_address_element';
  }

  if (isset($context['widget']) && $context['widget'] instanceof StringTextareaWidget) {
    /** @var \Drupal\Core\Field\FieldItemList $items */
    $items = $context['items'] ?? NULL;

    if ($items && in_array($items->getName(), ['field_accessible_accommodation', 'field_dietary_restrictions'])) {
      $element['value']['#maxlength'] = 255;
    }
  }
}

/**
 * After build callback for address widget.
 *
 * @see ilr_registrations_field_widget_single_element_form_alter()
 */
function ilr_registrations_alter_address_element($element, FormStateInterface $form_state) {
  // Find all address elements and prepend "Work" to the `#title`.
  foreach ($element['address'] as $key => $render_element) {
    if (strpos($key, 'address') === 0) {
      $element['address'][$key]['#title'] = t('Work ') . strtolower($element['address'][$key]['#title']);
    }
  }

  if (isset($element['address']['organization'])) {
    $element['address']['organization']['#title'] = t('Organization');
  }
  return $element;
}

/**
 * Implements hook_token_info_alter().
 */
function ilr_registrations_token_info_alter(&$data) {
  $time = \Drupal::time()->getRequestTime();
  $date = new \DateTime('@' . $time);
  $date->add(new DateInterval('P4M'));

  $data['tokens']['pattern']['year_P4M'] = [
    'name' => t('Year P4M'),
    'description' => t('The current year plus four months. (%date)', ['%date' => $date->format('Y')]),
  ];
}

/**
 * Implements hook_tokens().
 */
function ilr_registrations_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type === 'pattern') {
    $time = \Drupal::time()->getRequestTime();
    $date = new \DateTime('@' . $time);
    $date->add(new DateInterval('P4M'));

    // The tokens must not be cached due to the reliance on the current time.
    $bubbleable_metadata->setCacheMaxAge(0);

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'year_P4M':
          $replacements[$original] = $date->format('Y');
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_mail_alter().
 */
function ilr_registrations_mail_alter(&$message) {
  // When sending via Campaign Monitor transactional email, this helps with
  // reporting. See
  // https://help.campaignmonitor.com/classic-transactional-emails#group-smtp
  $message['headers']['X-Cmail-GroupName'] = \Drupal::config('system.site')->get('name');

  // Disable Campaign Monitor transactional email tracking features.
  $message['headers']['X-Cmail-TrackOpens'] = 'false';
  $message['headers']['X-Cmail-TrackClicks'] = 'false';
}

/**
 * Implements hook_entity_operation().
 *
 * Add a view operation for registrations if the user has the view permission.
 * @todo Figure out why this is not being provided directly by the ERF module.
 */
function ilr_registrations_entity_operation(EntityInterface $entity) {
  $operations = [];
  $user = \Drupal::currentUser();

  if ($entity->getEntityTypeId() === 'registration' && $user->hasPermission("view {$entity->bundle()} registrations")) {
    $operations['view'] = [
      'title' => t('View'),
      'url' => Url::fromRoute('entity.registration.canonical', ['registration' => $entity->id()]),
      'weight' => 0,
    ];
  }
  return $operations;
}
