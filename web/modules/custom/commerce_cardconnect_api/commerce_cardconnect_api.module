<?php

/**
 * @file
 * Contains commerce_cardconnect_api.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_operation().
 *
 * Add an operation to freedompay_hpp payments to view the full transaction
 * details.
 */
function commerce_cardconnect_api_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->getEntityTypeId() !== 'commerce_payment') {
    return;
  }

  if ($entity->getPaymentGateway()->getPluginId() !== 'cardpointe_api') {
    return;
  }

  // The transaction id (retref) is stored in the as the remote_id of the
  // payment. It shouldn't be missing for completed payments, but you never
  // know.
  if (empty($entity->getRemoteId())) {
    return;
  }

  $operations['cardpointe_api_transaction'] = [
    'title' => t('CardPointe Details'),
    'weight' => 200,
    'url' => Url::fromRoute('commerce_cardconnect_api.transaction', [
      'commerce_payment' => $entity->id(),
    ]),
  ];

  return $operations;
}

/**
 * Implements hook_entity_operation_alter().
 */
function commerce_cardconnect_api_entity_operation_alter(&$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'commerce_payment') {
    return;
  }

  // Change the title of the refund operation for payments that use the
  // `cardpointe_api` gateway if it is configured to not actually refund the
  // transaction via the API.
  if ($entity->payment_gateway->entity->getPluginId() === 'cardpointe_api' && isset($operations['refund'])) {
    if (!$entity->payment_gateway->entity->getPlugin()->shouldAttemptRefunds()) {
      $operations['refund']['title'] = t('Mark refunded');
    }
  }
}
