<?php

/**
 * @file
 * Contains ilr_groat.module.
 */

use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Custom allowed_values_function callback for the participant class year field.
 *
 * @see callback_allowed_values_function().
 */
function ilr_groat_class_year_options(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity, &$cacheable) {
  $years = range((int) date('Y'), 1947);
  return array_combine($years, $years);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the registration entity form for the type `groat_alpern_awards`.
 *
 * - Updates the register button text for clarity.
 */
function ilr_groat_form_registration_groat_alpern_single_embedded_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if ($form_state->getFormObject()->getEntity()->isNew()) {
    $button_text = t('Add to cart');
  }
  else {
    $button_text = t('Update cart');
  }

  $form['actions']['submit']['#value'] = $button_text;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Note that this may be called by ilr_groat_participant_update(), so don't add
 * other code here without extreme caution.
 */
function ilr_groat_registration_update(FieldableEntityInterface $registration) {
  if ($registration->commerce_order_item_id->isEmpty()) {
    return;
  }

  $order_item = $registration->commerce_order_item_id->entity;
  $product_variation = $order_item->getPurchasedEntity();

  if ($product_variation->getSku() !== 'groat-single-full') {
    return;
  }

  // Trigger a cart/order refresh.
  $order_item->order_id->entity->save();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Refresh the cart if a groat participant (attendee) changes the grad year.
 */
function ilr_groat_participant_update(FieldableEntityInterface $participant) {
  if (!$participant->hasField('field_class_year')) {
    return;
  }

  if ($participant->field_class_year->value !== $participant->original->field_class_year->value) {
    $registration_storage = \Drupal::service('entity_type.manager')->getStorage('registration');

    $registrations = $registration_storage->loadByProperties([
      'participants' => $participant->id(),
    ]);

    if (empty($registrations)) {
      return;
    }

    $registration = reset($registrations);

    // Call the registration update hook to refresh the cart.
    ilr_groat_registration_update($registration);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Re-enable the participants field on locked groat_alpern registrations, but
 * only for admins.
 */
function ilr_groat_form_registration_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\erf\Entity\RegistrationInterface $registration */
  $registration = $form_state->getFormObject()->getEntity();

  $is_groat_admin = in_array('groat_alpern_admin', \Drupal::currentUser()->getRoles());

  if ($is_groat_admin && $registration->bundle() === 'groat_alpern_sponsorship' && !empty($form['participants']['#disabled'])) {
    $form['participants']['#disabled'] = FALSE;
    $form['field_full_name']['#disabled'] = FALSE;
  }

  if ($is_groat_admin && $registration->bundle() === 'groat_alpern_single' && !empty($form['participants']['#disabled'])) {
    $form['participants']['#disabled'] = FALSE;
    $form['participants']['widget']['actions']['ief_add']['#disabled'] = TRUE;

    foreach (array_keys($form['participants']['widget']['entities']) as $key) {
      if (!is_numeric($key)) {
        continue;
      }
      $form['participants']['widget']['entities'][$key]['actions']['ief_entity_remove']['#disabled'] = TRUE;
    }
  }
}
