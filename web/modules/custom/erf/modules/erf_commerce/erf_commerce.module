<?php

/**
 * @file
 * Contains erf_commerce.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function erf_commerce_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the erf_commerce module.
    case 'help.page.erf_commerce':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Integrates Commerce products with Entity Registration Form.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function erf_commerce_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Add a new base field to the registration entity for connecting
  // registrations to commerce order items (i.e. product variations in a cart).
  if ($entity_type->id() === 'registration') {
    // @todo: This could be an entity reference field.
    $fields['commerce_order_item_id'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Commerce Order Item ID'))
      ->setSetting('target_type', 'commerce_order_item')
      ->setSetting('handler', 'default')
      ->setDefaultValue(NULL);
    return $fields;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a non-stored field to see if the product_variations field should be
 * attached to this registration type.
 */
function erf_commerce_form_registration_type_add_form_alter(array &$form, FormStateInterface $form_state) {
  $registration_type = $form_state->getFormObject()->getEntity();

  $form['attach_product_variation_field'] = [
    '#type' => 'checkbox',
    '#title' => t('Attach Product Variation Field'),
    '#description' => t('Useful info goes here.'),
  ];

  $form['actions']['submit']['#submit'][] = 'erf_commerce_form_registration_type_add_submit';
}

/**
 * Additional submit handler for the `registration_type_add_form` form.
 *
 * @see node_add_body_field() and commerce_product_add_variations_field().
 */
function erf_commerce_form_registration_type_add_submit(array &$form, FormStateInterface $form_state) {
  if (!$form_state->hasValue('attach_product_variation_field')) {
    return;
  }

  $registration_type = $form_state->getFormObject()->getEntity();
  $field_storage = FieldStorageConfig::loadByName('registration', 'product_variation');
  $field = FieldConfig::loadByName('registration', $registration_type->id(), 'product_variation');

  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $registration_type->id(),
      'label' => 'Variation',
      'required' => TRUE,
      'settings' => [
        'handler' => 'views',
        'handler_settings' => [
          'view' => [
            'view_name' => 'erf_product_variation_reference_for_current_product',
            'display_name' => 'entity_reference',
            'arguments' => [],
          ],
        ]
      ],
    ]);
    $field->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('registration', $registration_type->id(), 'default')
      ->setComponent('product_variation', [
        'type' => 'rendered_variations',
        'weight' => 0,
      ])
      ->removeComponent('user_id')
      ->save();
  }

  return $field;
}

/**
 * Get a new or existing cart for the user associated with a registration.
 */
function erf_get_cart_for_registration(EntityInterface $registration) {
  $commerce_cart_provider = \Drupal::service('commerce_cart.cart_provider');
  $store = \Drupal::service('commerce_store.current_store')->getStore();

  // Get or create a cart for the registration user.
  $cart = $commerce_cart_provider->getCart('default', $store, $registration->user_id->entity);
  if (empty($cart)) {
    $cart = $commerce_cart_provider->createCart('default', $store, $registration->user_id->entity);
  }

  return $cart;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Add an item to a cart when a registration with a `product_variation` field is
 * created.
 */
function erf_commerce_registration_insert(EntityInterface $registration) {
  if (!$registration->hasField('product_variation')) {
    return;
  }

  $entity_type_manager = \Drupal::service('entity_type.manager');
  $cart = erf_get_cart_for_registration($registration);
  $commerce_cart_manager = \Drupal::service('commerce_cart.cart_manager');

  // Get a count of the participants being registered, which will determine
  // the count of items in the cart.
  $quantity = $registration->participants->count();

  // Add the selected variation to the cart. The cart manager will create a user
  // notification.
  $variation = $registration->product_variation->entity;
  $order_item = $commerce_cart_manager->addEntity($cart, $variation, $quantity);

  // Link the order item as a reference on the newly created registration.
  $registration->commerce_order_item_id = $order_item->id();
  $registration->save();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Update order items if there are changes to a registration in a cart.
 */
function erf_commerce_registration_update(EntityInterface $registration) {
  if ($registration->commerce_order_item_id->isEmpty()) {
    return;
  }

  $order_item = $registration->commerce_order_item_id->entity;
  $order_item_changed = FALSE;

  // Check to see if the variation has changed.
  if ($registration->hasField('product_variation')) {
    if ($registration->product_variation->entity->id() !== $registration->original->product_variation->entity->id()) {
      // The variation selection has changed. Adjust the order item. Note that
      // the call to `updateOrderItem()` below will automatically trigger a
      // change the order_item title.
      $order_item->set('purchased_entity', $registration->product_variation->entity->id());
      $order_item_changed = TRUE;
    }
  }

  // Check to see if the number of participants has changed.
  if ($registration->participants->count() !== $registration->original->participants->count()) {
    // Change the order item quantity. Note that the call to `updateOrderItem()`
    // below will automatically trigger a recalculation of the total price.
    $order_item->set('quantity', $registration->participants->count());
    $order_item_changed = TRUE;
  }

  // Only save the order item if there are modifications.
  if ($order_item_changed) {
    $cart = erf_get_cart_for_registration($registration);
    $commerce_cart_manager = \Drupal::service('commerce_cart.cart_manager');
    $commerce_cart_manager->updateOrderItem($cart, $order_item);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Remove any registrations linked to deleted order items.
 */
function erf_commerce_commerce_order_item_delete(EntityInterface $order_item) {
  $registration = \Drupal::entityTypeManager()->getStorage('registration')->loadByProperties([
    'commerce_order_item_id' => $order_item->id(),
  ]);

  if ($registration) {
    $registration = reset($registration);
    $registration->delete();
  }
}
