<?php

use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\HasPaymentInstructionsInterface;
use Drupal\Core\Link;

/**
 * @file Theme file for the union_register.theme.
 */

/**
 * Implements hook_preprocess_page().
 */
function union_register_preprocess_page(array &$variables) {
  if (getenv('LIVERELOAD')) {
    $variables['#attached']['library'][] = 'union_register/livereload';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Only display the city and state for class locations.
 */
function union_register_preprocess_field__field_class_location(&$variables) {
  foreach ($variables['items'] as $key => $item) {
    $variables['items_override'][$key]['content'] = [
      'locality' => $item['content']['locality'],
      'administrative_area' => $item['content']['administrative_area'],
    ];
  }

  $variables['items_original'] = $variables['items'];
  $variables['items'] = $variables['items_override'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add variables to the checkout completion message template.
 */
function union_register_preprocess_commerce_checkout_completion_message(&$variables) {
  $variables['home_link'] = Link::createFromRoute(t('Account Home'), 'entity.user.canonical', [
    'user' => $variables['order_entity']->getCustomer()->id()
  ])->toString();

  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('commerce_order');
  $variables['order_detail'] = $view_builder->view($variables['order_entity'], 'user');
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add variables to the checkout completion email template.
 */
function union_register_preprocess_commerce_order_receipt(&$variables) {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $registration_storage = $entity_type_manager->getStorage('registration');
  $view_builder = $entity_type_manager->getViewBuilder('participant');
  $order_items = [];
  $items = $variables['order_entity']->getItems();
  $billing_profile = $variables['order_entity']->getBillingProfile();

  if ($billing_profile) {
    $billing_address = $billing_profile->address->first()->getValue();

    // Use the billing profile first and last name as the display name.
    $variables['display_name'] = $billing_address['given_name'] . ' ' . $billing_address['family_name'];
  }

  foreach ($items as $item) {
    $order_items[$item->id()]['commerce'] = $item;

    // Process registrations and participants for this item.
    $participants = [];
    $registrations = $registration_storage->loadByProperties([
      'commerce_order_item_id' => $item->id(),
    ]);

    if (!empty($registrations)) {
      $registration = reset($registrations);

      foreach ($registration->participants->referencedEntities() as $participant) {
        $order_items[$item->id()]['erf']['participants'][] = $view_builder->view($participant, 'order_item');
      }
    }
  }

  $variables['order_items'] = $order_items;

  /** @var \Drupal\commerce_payment\Entity\PaymentGatewayInterface $payment_gateway */
  $payment_gateway = $variables['order_entity']->get('payment_gateway')->entity;
  /** @var \Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\HasPaymentInstructionsInterface $payment_gateway_plugin */
  $payment_gateway_plugin = $payment_gateway ? $payment_gateway->getPlugin() : NULL;
  if ($payment_gateway_plugin instanceof HasPaymentInstructionsInterface) {
    $payment_storage = \Drupal::entityTypeManager()->getStorage('commerce_payment');
    $payments = $payment_storage->loadMultipleByOrder($variables['order_entity']);
    $payments = array_filter($payments, function ($payment) use ($payment_gateway) {
      return $payment->getPaymentGatewayId() == $payment_gateway->id();
    });
    $payment = reset($payments);
    if ($payment) {
      $variables['payment_instructions'] = $payment_gateway_plugin->buildPaymentInstructions($payment);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add a non-standard Union class to all blocks so that custom property font
 * styles will apply.
 */
function union_register_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = 'cu-x-block';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add the cu-text class to all body fields so that custo property font styles
 * will apply to <a> elements.
 */
function union_register_preprocess_field__body(&$variables) {
  $variables['attributes']['class'][] = 'cu-text';
}
